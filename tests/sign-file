#!/usr/bin/env python3
# vim: tw=79
# Copyright Â© 2017 Endless Mobile, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
import argparse
import logging
import os
import shlex
import subprocess
import tempfile


LOGGER = logging.getLogger(os.path.basename(__file__))


def cmd(*args):
    LOGGER.info("$ %s", " ".join(map(shlex.quote, args)))
    subprocess.check_call(args)


def main():
    description = '''Sign 'file' using the given private key 'privkey'. The
    ASCII-armoured signature is written to 'file'.asc.'''

    epilog = '''We use a temporary directory in /tmp rather than in the
    builddir because GPG2 requires the use of gpg-agent and auto-launches
    it, communicating through a Unix socket in the GPG homedir. If the
    source/builddir are on a VirtualBox shared folder, this fails.

    Using a purely transient temporary directory also helps ensure this is
    isolated from the host system.'''
    logging.basicConfig(level=logging.INFO)

    p = argparse.ArgumentParser(description=description, epilog=epilog)
    p.add_argument('--gpg-path', default='gpg', help='Path to GPG')
    p.add_argument('--gpgconf-path', default='gpgconf', help='Path to gpgconf')
    p.add_argument('privkey', help='path to exported private key')
    p.add_argument('file', help='path to file to sign')
    a = p.parse_args()

    try:
        os.unlink(a.file + '.asc')
    except FileNotFoundError:
        pass

    with tempfile.TemporaryDirectory() as gnupghome:
        cmd(a.gpg_path, "--batch", "--homedir", gnupghome, "--import", a.privkey)
        cmd(a.gpg_path, "--batch", "--homedir", gnupghome, "--detach-sign",
            "--armor", a.file)
        cmd(a.gpgconf_path, "--homedir", gnupghome, "--kill", "gpg-agent")


if __name__ == '__main__':
    main()
